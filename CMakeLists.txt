cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)

set(VERSION "1.0")
set(LANGUAGES )

list(APPEND LANGUAGES "C")
list(APPEND LANGUAGES "CXX")
list(APPEND LANGUAGES "OBJC")
list(APPEND LANGUAGES "OBJCXX")

if ("${CMAKE_GENERATOR}" STREQUAL "Xcode")
    execute_process(COMMAND uname -m OUTPUT_VARIABLE UNAME_M ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
    if (NOT "$ENV{SYSROOT}" STREQUAL "")
        set(SYSROOT "$ENV{SYSROOT}")
    else()
        execute_process(COMMAND xcodebuild -version -sdk macosx Path OUTPUT_VARIABLE SYSROOT ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
    endif()
    if (NOT EXISTS "${SYSROOT}")
        message(FATAL_ERROR "SYSROOT does not exist!")
    endif()
    set(CMAKE_OSX_SYSROOT "${SYSROOT}")
    if ("${CMAKE_OSX_ARCHITECTURES}" STREQUAL "")
        if ("${UNAME_M}" MATCHES "arm")
            set(CMAKE_OSX_ARCHITECTURES "arm64")
        else()
            set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)")
        endif()
    endif()
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        #set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE Automatic)
        #set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "Apple Development")
        #set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_INJECT_BASE_ENTITLEMENTS YES)
        set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH YES)
        set(CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC NO)
        set(CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_WEAK YES)
        set(CMAKE_XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME NO)
    endif()
endif()

project(VtUudSeiNalCmake VERSION ${VERSION} LANGUAGES ${LANGUAGES})

if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    set(CMAKE_DEBUG_POSTFIX "${CMAKE_BUILD_TYPE}")
endif()

set(SRCS )
set(DEFS )
set(LIBS )

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    list(APPEND DEFS "DEBUG")
endif()

if (WINDOWS)
    if ("$ENV{PROCESSOR_ARCHITECTURE}" MATCHES "64")
        list(APPEND DEFS "BITNESS_64")
    endif()
    if ("$ENV{PROCESSOR_ARCHITECTURE}" MATCHES "ARM")
        list(APPEND DEFS "ARCH_ARM")
    endif()
    list(APPEND DEFS "OS_WINDOWS")
else()
    execute_process(COMMAND "${CMAKE_CURRENT_LIST_DIR}/config.guess" OUTPUT_VARIABLE CONFIG_GUESS ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
    if ("${CONFIG_GUESS}" MATCHES "64")
        list(APPEND DEFS "BITNESS_64")
    endif()
    if ("${CONFIG_GUESS}" MATCHES "arm" OR "${CONFIG_GUESS}" MATCHES "aarch")
        list(APPEND DEFS "ARCH_ARM")
    endif()
    if (APPLE)
        list(APPEND DEFS "OS_APPLE")
    else()
        list(APPEND DEFS "OS_LINUX")
    endif()
endif()

find_package(Threads REQUIRED)
find_package(OpenGL REQUIRED)

list(APPEND LIBS Threads::Threads)
if (NOT LINUX)
    list(APPEND LIBS ${OPENGL_gl_LIBRARY})
else()
    list(APPEND LIBS OpenGL::OpenGL)
endif()

find_library(CORE_VIDEO_LIBRARY CoreVideo)
list(APPEND LIBS ${CORE_VIDEO_LIBRARY})

find_library(CORE_MEDIA_LIBRARY CoreMedia)
list(APPEND LIBS ${CORE_MEDIA_LIBRARY})

find_library(USE_CORE_IMAGE CoreImage)
list(APPEND LIBS ${USE_CORE_IMAGE})

find_library(FOUNDATION_LIBRARY Foundation)
list(APPEND LIBS ${FOUNDATION_LIBRARY})

find_library(QUARTZ_CORE_LIBRARY QuartzCore)
list(APPEND LIBS ${QUARTZ_CORE_LIBRARY})

find_library(VIDEO_TOOLBOX_LIBRARY VideoToolbox)
list(APPEND LIBS ${VIDEO_TOOLBOX_LIBRARY})

find_library(VIDEO_DECODE_ACCELERATION_LIBRARY VideoDecodeAcceleration)
list(APPEND LIBS ${VIDEO_DECODE_ACCELERATION_LIBRARY})

include_directories("${CMAKE_CURRENT_LIST_DIR}")

file(GLOB INC_SRCS "${CMAKE_CURRENT_LIST_DIR}/*.h*")
file(GLOB CXX_SRCS "${CMAKE_CURRENT_LIST_DIR}/*.c*")
file(GLOB OBJCXX_SRCS "${CMAKE_CURRENT_LIST_DIR}/*.m*")
list(APPEND SRCS ${INC_SRCS})
list(APPEND SRCS ${CXX_SRCS})
list(APPEND SRCS ${OBJCXX_SRCS})

add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/h264bitstream")
list(APPEND LIBS h264bitstream)

add_executable(${PROJECT_NAME} ${SRCS})
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin" BUNDLE DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
#set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)
target_compile_definitions(${PROJECT_NAME} PRIVATE ${DEFS})
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_11)
target_link_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_LIST_DIR}")
target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBS})

